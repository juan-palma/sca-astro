---
import { Picture, Image } from 'astro:assets';
import SliderClient from "./SliderClient.jsx";
import "./slider.css";

export interface Slide {
	img: string;
	text?: string;
	class?: string;
	id?: string;
	delay?: number;
}

export interface Props {
	slides: Slide[];
	defaultDelay?: number;
	sliderId?: string;
}

const { slides, defaultDelay = 8000, sliderId = "heroSlider" } = Astro.props;
---

<div class="sliderG" id={sliderId}>
	<div class="slidesWrapper">
		<!-- Clon del Ãºltimo slide al inicio -->
		{
			slides.length > 1 && (
				<article class={`slide slide--clone ${slides.at(-1)?.class ?? ""}`}>
					<figure class="slide__content">
						<Picture
							src={slides.at(-1)?.img}
							formats={['avif', 'webp']}}
							alt="slAntes"
							sizes={`(max-width: 360px) 720px, (max-width: 720px) 1480px, ${slides.at(-1)?.img.width}px`}
							loading="eager"
							fallbackFormat="webp"
						/>
						{slides.at(-1)?.text && ( <figcaption set:html={slides.at(-1).text} /> )}
					</figure>
				</article>
			)
		}

		<!-- Slides reales -->
		{
			slides.map((slide, index) => (
				<article class={`slide ${slide.class ?? ""}`} id={slide.id ?? undefined}>
					<figure class="slide__content">
						<Picture 
							src={slide.img}
							formats={['avif', 'webp']}
							loading={slide.img.src === slides[0].img.src ? "eager" : "lazy"}
							alt={`sl${index}`}
							sizes={`(max-width: 360px) 720px, (max-width: 720px) 1480px, ${slide.img.width}px`}
							fallbackFormat="webp"
						/>
						{slide.text && <figcaption set:html={slide.text} />}
					</figure>
				</article>
			))
		}

		<!-- Clon del primer slide al final -->
		{
			slides.length > 1 && (
				<article class={`slide slide--clone ${slides[0]?.class ?? ""}`}>
					<figure class="slide__content">
						<Picture
							src={slides[0]?.img}
							formats={['avif', 'webp']}}
							alt="slDespues"
							sizes={`(max-width: 360px) 720px, (max-width: 720px) 1480px, ${slides[0]?.img.width}px`}
							fallbackFormat="webp"
						/>
						{slides[0]?.text && ( <figcaption set:html={slides[0].text} /> )}
					</figure>
				</article>
			)
		}
	</div>

	<button class="nav nav--prev" aria-label="Anterior">
		<img
			src="/img/sliders/flecha_back.svg"
			alt="back"
			width="40"
			height="40"
			loading="eager"
			decoding="async"
		/>
	</button>
	<button class="nav nav--next" aria-label="Siguiente">
		<img
			src="/img/sliders/flecha_next.svg"
			alt="next"
			width="40"
			height="40"
			loading="eager"
			decoding="async"
		/>
	</button>
	<ul class="dots"></ul>
</div>

<SliderClient
	client:load
	id={sliderId}
	slides={slides}
	defaultDelay={defaultDelay}
/>
